{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/cobyobi/SUNGAZE%20APP/package.json/src/app/lib/founder-tracker.ts"],"sourcesContent":["// Founder tracking system for accurate counts and founder management\n\nexport interface FounderInfo {\n  id: string;\n  founderNumber: number; // 1-444\n  email: string;\n  name?: string;\n  purchaseDate: string;\n  stripeCustomerId?: string;\n  stripePaymentId?: string;\n  region: 'us' | 'africa' | 'europe' | 'asia' | 'other';\n  ritualEmail?: string; // Email they provided for ritual access\n  status: 'active' | 'refunded';\n}\n\nclass FounderTracker {\n  private founders = new Map<string, FounderInfo>();\n  private foundersByNumber = new Map<number, FounderInfo>();\n  private nextFounderNumber = 1;\n  private readonly MAX_FOUNDERS = 444;\n\n  constructor() {\n    this.initializeFounders();\n  }\n\n  private initializeFounders() {\n    // Initialize with you as the first founder\n    const firstFounder: FounderInfo = {\n      id: 'test-user-1', // Your user ID\n      founderNumber: 1,\n      email: 'test@sungaze.com', // Founder #1 email\n      name: 'Founder #1',\n      purchaseDate: new Date().toISOString(),\n      region: 'us',\n      status: 'active'\n    };\n    \n    this.founders.set('test-user-1', firstFounder);\n    this.foundersByNumber.set(1, firstFounder);\n    this.nextFounderNumber = 2;\n    \n    console.log('Initialized founder system with Founder #1');\n  }\n\n  // Register a new founder (called after successful payment)\n  async registerFounder(userId: string, email: string, paymentInfo: {\n    stripeCustomerId?: string;\n    stripePaymentId?: string;\n    region?: string;\n  }): Promise<{ success: boolean; founderNumber?: number; error?: string }> {\n    \n    // Check if already a founder\n    if (this.founders.has(userId)) {\n      const existing = this.founders.get(userId)!;\n      return { success: true, founderNumber: existing.founderNumber };\n    }\n\n    // Check if we've reached the limit\n    if (this.nextFounderNumber > this.MAX_FOUNDERS) {\n      return { \n        success: false, \n        error: 'All 444 Founder spots have been claimed worldwide!' \n      };\n    }\n\n    // Create new founder\n    const founderNumber = this.nextFounderNumber;\n    const newFounder: FounderInfo = {\n      id: userId,\n      founderNumber,\n      email,\n      purchaseDate: new Date().toISOString(),\n      region: (paymentInfo.region as any) || 'us',\n      stripeCustomerId: paymentInfo.stripeCustomerId,\n      stripePaymentId: paymentInfo.stripePaymentId,\n      status: 'active'\n    };\n\n    // Store founder\n    this.founders.set(userId, newFounder);\n    this.foundersByNumber.set(founderNumber, newFounder);\n    this.nextFounderNumber++;\n\n    console.log(`New Founder #${founderNumber} registered:`, newFounder);\n    \n    // Save to persistent storage (in production, this would be a database)\n    this.saveToStorage();\n    \n    return { success: true, founderNumber };\n  }\n\n  // Get founder info by user ID\n  getFounder(userId: string): FounderInfo | null {\n    return this.founders.get(userId) || null;\n  }\n\n  // Get founder by number\n  getFounderByNumber(founderNumber: number): FounderInfo | null {\n    return this.foundersByNumber.get(founderNumber) || null;\n  }\n\n  // Get current founder stats\n  getFounderStats() {\n    const totalClaimed = this.founders.size;\n    const remaining = this.MAX_FOUNDERS - totalClaimed;\n    \n    return {\n      totalClaimed,\n      remaining: Math.max(0, remaining),\n      maxFounders: this.MAX_FOUNDERS,\n      nextFounderNumber: this.nextFounderNumber <= this.MAX_FOUNDERS ? this.nextFounderNumber : null,\n      isFullySubscribed: totalClaimed >= this.MAX_FOUNDERS\n    };\n  }\n\n  // Get all founders (for admin purposes)\n  getAllFounders(): FounderInfo[] {\n    return Array.from(this.founders.values()).sort((a, b) => a.founderNumber - b.founderNumber);\n  }\n\n  // Get founders with ritual emails (who can be contacted)\n  getFoundersWithRitualEmails(): FounderInfo[] {\n    return this.getAllFounders().filter(f => f.ritualEmail && f.status === 'active');\n  }\n\n  // Update founder's ritual email\n  updateFounderRitualEmail(userId: string, ritualEmail: string): boolean {\n    const founder = this.founders.get(userId);\n    if (founder) {\n      founder.ritualEmail = ritualEmail;\n      this.saveToStorage();\n      return true;\n    }\n    return false;\n  }\n\n  // Export founder data for admin\n  exportFounderData() {\n    const founders = this.getAllFounders();\n    const stats = this.getFounderStats();\n    \n    return {\n      summary: stats,\n      founders: founders.map(f => ({\n        founderNumber: f.founderNumber,\n        email: f.email,\n        ritualEmail: f.ritualEmail || 'Not provided',\n        purchaseDate: f.purchaseDate,\n        region: f.region,\n        status: f.status\n      }))\n    };\n  }\n\n  // Save to localStorage (in production, use proper database)\n  private saveToStorage() {\n    if (typeof window === 'undefined') return;\n    \n    try {\n      const data = {\n        founders: Array.from(this.founders.entries()),\n        foundersByNumber: Array.from(this.foundersByNumber.entries()),\n        nextFounderNumber: this.nextFounderNumber\n      };\n      localStorage.setItem('sungaze_founders', JSON.stringify(data));\n    } catch (error) {\n      console.error('Failed to save founder data:', error);\n    }\n  }\n\n  // Load from localStorage (in production, load from database)\n  private loadFromStorage() {\n    if (typeof window === 'undefined') return;\n    \n    try {\n      const stored = localStorage.getItem('sungaze_founders');\n      if (stored) {\n        const data = JSON.parse(stored);\n        this.founders = new Map(data.founders);\n        this.foundersByNumber = new Map(data.foundersByNumber);\n        this.nextFounderNumber = data.nextFounderNumber;\n      }\n    } catch (error) {\n      console.error('Failed to load founder data:', error);\n    }\n  }\n}\n\n// Export singleton instance\nexport const founderTracker = new FounderTracker();"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 197, "column": 0}, "map": {"version":3,"sources":["file:///Users/cobyobi/SUNGAZE%20APP/package.json/src/app/api/founders/stats/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { founderTracker } from '../../../lib/founder-tracker';\n\nexport async function GET() {\n  try {\n    const stats = founderTracker.getFounderStats();\n    \n    return NextResponse.json({\n      success: true,\n      data: {\n        totalClaimed: stats.totalClaimed,\n        remaining: stats.remaining,\n        maxFounders: stats.maxFounders,\n        isFullySubscribed: stats.isFullySubscribed,\n        percentageClaimed: Math.round((stats.totalClaimed / stats.maxFounders) * 100)\n      }\n    });\n  } catch (error) {\n    console.error('Error getting founder stats:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to get founder stats' },\n      { status: 500 }\n    );\n  }\n}\n\n// Export founder data (admin only - add auth in production)\nexport async function POST() {\n  try {\n    const exportData = founderTracker.exportFounderData();\n    \n    return NextResponse.json({\n      success: true,\n      data: exportData\n    });\n  } catch (error) {\n    console.error('Error exporting founder data:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to export founder data' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,QAAQ,8LAAc,CAAC,eAAe;QAE5C,OAAO,mLAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;gBACJ,cAAc,MAAM,YAAY;gBAChC,WAAW,MAAM,SAAS;gBAC1B,aAAa,MAAM,WAAW;gBAC9B,mBAAmB,MAAM,iBAAiB;gBAC1C,mBAAmB,KAAK,KAAK,CAAC,AAAC,MAAM,YAAY,GAAG,MAAM,WAAW,GAAI;YAC3E;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,mLAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAA8B,GACvD;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,aAAa,8LAAc,CAAC,iBAAiB;QAEnD,OAAO,mLAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;QACR;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO,mLAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAAgC,GACzD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}