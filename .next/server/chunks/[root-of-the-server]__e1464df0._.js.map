{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Users/cobyobi/SUNGAZE%20APP/package.json/src/app/api/payments/create-checkout-session/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport Stripe from 'stripe';\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: '2025-08-27.basil',\n});\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { priceId, tier, region, userId, email, successUrl, cancelUrl } = body;\n\n    if (!priceId || !tier || !userId || !email) {\n      return NextResponse.json(\n        { error: 'Missing required fields' },\n        { status: 400 }\n      );\n    }\n\n    // Create or retrieve customer\n    let customer;\n    const existingCustomers = await stripe.customers.list({\n      email: email,\n      limit: 1,\n    });\n\n    if (existingCustomers.data.length > 0) {\n      customer = existingCustomers.data[0];\n    } else {\n      customer = await stripe.customers.create({\n        email: email,\n        metadata: {\n          userId: userId,\n          tier: tier,\n          region: region || 'us',\n        },\n      });\n    }\n\n    // Determine mode based on tier\n    const isOneTime = tier === 'founder_444';\n    const mode = isOneTime ? 'payment' : 'subscription';\n\n    console.log('Creating checkout session:', { tier, priceId, mode, isOneTime });\n\n    // Create checkout session\n    const sessionConfig: any = {\n      customer: customer.id,\n      payment_method_types: ['card'],\n      line_items: [\n        {\n          price: priceId,\n          quantity: 1,\n        },\n      ],\n      mode: mode,\n      success_url: successUrl || `${process.env.NEXT_PUBLIC_APP_URL}/success?session_id={CHECKOUT_SESSION_ID}`,\n      cancel_url: cancelUrl || `${process.env.NEXT_PUBLIC_APP_URL}/cancel`,\n      metadata: {\n        userId: userId,\n        tier: tier,\n        region: region || 'us',\n      },\n    };\n\n    // Only add subscription_data for subscription mode\n    if (!isOneTime) {\n      sessionConfig.subscription_data = {\n        metadata: {\n          userId: userId,\n          tier: tier,\n          region: region || 'us',\n        },\n      };\n    }\n\n    console.log('Session config:', JSON.stringify(sessionConfig, null, 2));\n\n    const session = await stripe.checkout.sessions.create(sessionConfig);\n\n    return NextResponse.json({ \n      sessionId: session.id,\n      url: session.url \n    });\n  } catch (error) {\n    console.error('Error creating checkout session:', error);\n    return NextResponse.json(\n      { error: 'Failed to create checkout session' },\n      { status: 500 }\n    );\n  }\n}\n\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,sMAAM,CAAC,QAAQ,GAAG,CAAC,iBAAiB,EAAG;IACxD,YAAY;AACd;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,SAAS,EAAE,GAAG;QAExE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO;YAC1C,OAAO,mLAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,8BAA8B;QAC9B,IAAI;QACJ,MAAM,oBAAoB,MAAM,OAAO,SAAS,CAAC,IAAI,CAAC;YACpD,OAAO;YACP,OAAO;QACT;QAEA,IAAI,kBAAkB,IAAI,CAAC,MAAM,GAAG,GAAG;YACrC,WAAW,kBAAkB,IAAI,CAAC,EAAE;QACtC,OAAO;YACL,WAAW,MAAM,OAAO,SAAS,CAAC,MAAM,CAAC;gBACvC,OAAO;gBACP,UAAU;oBACR,QAAQ;oBACR,MAAM;oBACN,QAAQ,UAAU;gBACpB;YACF;QACF;QAEA,+BAA+B;QAC/B,MAAM,YAAY,SAAS;QAC3B,MAAM,OAAO,YAAY,YAAY;QAErC,QAAQ,GAAG,CAAC,8BAA8B;YAAE;YAAM;YAAS;YAAM;QAAU;QAE3E,0BAA0B;QAC1B,MAAM,gBAAqB;YACzB,UAAU,SAAS,EAAE;YACrB,sBAAsB;gBAAC;aAAO;YAC9B,YAAY;gBACV;oBACE,OAAO;oBACP,UAAU;gBACZ;aACD;YACD,MAAM;YACN,aAAa,cAAc,2DAAmC,yCAAyC,CAAC;YACxG,YAAY,aAAa,2DAAmC,OAAO,CAAC;YACpE,UAAU;gBACR,QAAQ;gBACR,MAAM;gBACN,QAAQ,UAAU;YACpB;QACF;QAEA,mDAAmD;QACnD,IAAI,CAAC,WAAW;YACd,cAAc,iBAAiB,GAAG;gBAChC,UAAU;oBACR,QAAQ;oBACR,MAAM;oBACN,QAAQ,UAAU;gBACpB;YACF;QACF;QAEA,QAAQ,GAAG,CAAC,mBAAmB,KAAK,SAAS,CAAC,eAAe,MAAM;QAEnE,MAAM,UAAU,MAAM,OAAO,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC;QAEtD,OAAO,mLAAY,CAAC,IAAI,CAAC;YACvB,WAAW,QAAQ,EAAE;YACrB,KAAK,QAAQ,GAAG;QAClB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oCAAoC;QAClD,OAAO,mLAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAoC,GAC7C;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}