{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/cobyobi/SUNGAZE%20APP/package.json/src/app/api/audio/signed-url/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\nexport async function POST(req: NextRequest) {\n  try {\n    // Check if request has body\n    const body = await req.text();\n    if (!body) {\n      return NextResponse.json({ error: 'Request body is required' }, { status: 400 });\n    }\n    \n    let parsedBody;\n    try {\n      parsedBody = JSON.parse(body);\n    } catch (parseError) {\n      console.error('JSON parse error:', parseError);\n      return NextResponse.json({ error: 'Invalid JSON in request body' }, { status: 400 });\n    }\n    \n    const { storagePath } = parsedBody;\n    \n    if (!storagePath) {\n      return NextResponse.json({ error: 'Storage path is required' }, { status: 400 });\n    }\n\n    // Since the bucket is public, we can construct the direct URL\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\n    \n    if (!supabaseUrl) {\n      return NextResponse.json({ error: 'Supabase URL not configured' }, { status: 500 });\n    }\n\n    // Extract just the filename from the path\n    const fileName = storagePath.includes('/') \n      ? storagePath.split('/').pop() \n      : storagePath;\n    \n    console.log('Generating public URL for:', fileName);\n    console.log('Full storage path:', storagePath);\n    \n    // Construct the public URL for the file\n    const publicUrl = `${supabaseUrl}/storage/v1/object/public/audio/${encodeURIComponent(fileName!)}`;\n    \n    console.log('Public URL:', publicUrl);\n\n    return NextResponse.json({ url: publicUrl });\n  } catch (error: any) {\n    console.error('Error in audio URL endpoint:', error);\n    return NextResponse.json({ error: error.message }, { status: 500 });\n  }\n}"],"names":[],"mappings":";;;;AAAA;;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,4BAA4B;QAC5B,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,IAAI,CAAC,MAAM;YACT,OAAO,mLAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA2B,GAAG;gBAAE,QAAQ;YAAI;QAChF;QAEA,IAAI;QACJ,IAAI;YACF,aAAa,KAAK,KAAK,CAAC;QAC1B,EAAE,OAAO,YAAY;YACnB,QAAQ,KAAK,CAAC,qBAAqB;YACnC,OAAO,mLAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA+B,GAAG;gBAAE,QAAQ;YAAI;QACpF;QAEA,MAAM,EAAE,WAAW,EAAE,GAAG;QAExB,IAAI,CAAC,aAAa;YAChB,OAAO,mLAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA2B,GAAG;gBAAE,QAAQ;YAAI;QAChF;QAEA,8DAA8D;QAC9D,MAAM;QAEN;;QAIA,0CAA0C;QAC1C,MAAM,WAAW,YAAY,QAAQ,CAAC,OAClC,YAAY,KAAK,CAAC,KAAK,GAAG,KAC1B;QAEJ,QAAQ,GAAG,CAAC,8BAA8B;QAC1C,QAAQ,GAAG,CAAC,sBAAsB;QAElC,wCAAwC;QACxC,MAAM,YAAY,GAAG,YAAY,gCAAgC,EAAE,mBAAmB,WAAY;QAElG,QAAQ,GAAG,CAAC,eAAe;QAE3B,OAAO,mLAAY,CAAC,IAAI,CAAC;YAAE,KAAK;QAAU;IAC5C,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,mLAAY,CAAC,IAAI,CAAC;YAAE,OAAO,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACnE;AACF","debugId":null}}]
}